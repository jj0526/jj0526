Synchronization
    계속 기다리면 안되기 때문에 starvation free
    1.28은 deadlock이 생김
    Peterson`s solution은 2개 이상일때 복잡해짐
    atomic : non-interruptible        

    1.38 : 계속 하드웨어를 solution require busy waiting

    mutex는 binary semaphore은 integer형
    
    1.46 : L과 H는 R로 연관됨(독립적이 아님). M이 실행됨을써 L과 H가 delay.
     H가 M을 기다리는 기이한 현상 발생
    -> 우선권을 상속받아서 우선순위를 상속받았기 때문에 M에게 우선순위를 안뺏김.

    1.48 : 1) 순서가 잘못됨. signal을 통해 2가 된 상태에서 wait를 부르면 문제가 발생
    mutual exclusion is violated
    2) deadlock will occur

    1.57 read만 하는 것은 문제가 안생김. write까지 하면 문제가 생김
    1.59 single core가 아니기 때문에 안전히 readcount--;하기 위해 wait(mutex) 사용

Deadlocks1
    - cycle = deadlock?
    instance가 1개면 deadlock이 됨. 여러개가 있으면 deadlock이 아닐 수도 있음
Deadlocks2
    - Deadlock Preventation
        - 4개의 condition 중 하나라도 못되게 함
        - 리소스를 잡고 기다리기 x
        - allow preemption
        - no circular wait
            - printer은 disk drive에 요청x (order가 먼저라)
    - Problems of No hold and wait
        - low resource utilization (기다리기만 하니까)
        - starvation

    - Deadlock avoidance
        - deadlock이 일어날지 미리 생각(simulation)
        - 자원을 줄 수 있는 sequence가 있는 safe sequence가 발견되면 할당해줘도 된다
    1.19 : P1 -> P0 -> P2
    1.21 : compile에서 주소를 부여는 x
    1.22 unsafe state : 조금이라도 deadlock이 걸릴 가능성이 있을때
    1.29 : j번째 리소스를 k개 들고있음
    1.30 : Finish[i] == false -> not finished one

    1.47: 요청이 올때마다 하면 이 프로세스가 deadlock을 했구나를 알지만 overhead가 늘어남
    1.49 : deadlock이 없어질 때까지 죽이기
    
    1.20 : 다양한 시점에 binding
    1.23 : relocation할때 address가 바뀌면 다시 reload 해야됨

    잘 사용하지 않는 library는 dynamic하게 저장


    - Paging
        - physical memory -> fixed-sized block : frames
        - logical memory -> blocks of same size : pages
        size of one frame = size of one page

    1.39 : page and page offset
    1.41 : logical address : 1  frame : 5(21), offset : 1
            logical address : 11    frame : 5, offset : 3
    1.46 : internal fragmentation 2048 * 35 + 1086
    context change가 일어났을때 PTBR과 PTLR를 바꿔주면 됨
    cache를 TLB라 부름. search가 매우 빠름
    parellel하게 search 해서 있으면 TLB hit, 없다면 TLB miss
    1.54 : page table는 index 사용(p)
    1.55 다른 cache임.
    1.56 EAT = ... miss 했을때 expectation. TLB를 잘 짜면 102ns까지 내려감
    1.61 Hierarchical paging 계층
    1.61 : p를 넣으면 f가 튀어나옴
    1.66 한 os에는 하나의 table만 있다. physical frame 기준으로 indexing 하기.
     i번째 index면 table에 그대로 그 index에 가면 됨.
     단점 : worst case : 맨 아래에 있으면 오래걸림
     memory share가 어려움